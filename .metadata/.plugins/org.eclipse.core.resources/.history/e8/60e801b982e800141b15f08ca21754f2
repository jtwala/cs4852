package networkpkg;
import java.util.Iterator;

import static networkpkg.AdjMatrixGraph.Status;

public class Network {
	
	public final float NONPLAYER_TO_DOTA_THRESHOLD = 0.6f;
	public final float NONPLAYER_TO_LEAGUE_THRESHOLD = 0.4f;
	public final float LEAGUE_TO_DOTA_THRESHOLD = 0.6f;
	public final float DOTA_TO_LEAGUE_THRESHOLD = 0.4f;
	public final float DOTA_INFLUENCE = 0.1f;
	public final float LEAGUE_INFLUENCE = 0.2f;
	
	public int NUM_ROUNDS = 4;
	
	private Status[] tempStatuses;

	/**Run one 'round' of the network algorithm on the given graph,
	 * modifying in place.
	 */
	public void simulateRound(AdjMatrixGraph G) {
		int numVertices = G.V();
		tempStatuses = new Status[numVertices];
		for (int v = 0; v < numVertices; v++) {
			tempStatuses[v] = calculateVertexStatus(G, v);
		}
		
		for (int v = 0; v < numVertices; v++) {
			G.vertexStatuses[v] = tempStatuses[v];
		}
		
	}
	
	/**Modify tempStatuses to contain the new status (NONPLAYER, LEAGUE, DOTA, BOTH)
	 * of the given vertex based on the status of its neighbors
	 */
	private Status calculateVertexStatus(AdjMatrixGraph G, int vertex) {
		Status currentStatus = G.vertexStatuses[vertex];
		Status newStatus = G.vertexStatuses[vertex];
		float numLeague = 0;
		float numDotA = 0;
		float totalNeighbors = 0;
		float percentDotA = 0;
		float percentLeague = 0;
		
		//Count neighbor statuses
		Iterator<Integer> itr = G.adj(vertex).iterator();
		while(itr.hasNext()) {
			int neighbor = itr.next();
			Status neighborStatus = G.vertexStatuses[neighbor];
			totalNeighbors++;
			
			switch(neighborStatus) {
				case NONPLAYER:
					break;
				case LEAGUE:
					numLeague++;
					break;
				case DOTA:
					numDotA++;
					break;
				case BOTH:
					numDotA++;
					numLeague++;
					break;
				default:
					break;
			}
		}
		
		//TODO: Calculate new status based on neighbors
		switch(currentStatus) {
			case NONPLAYER:
				boolean caughtDotA = false;
				boolean caughtLeague = false;
				percentDotA = 1f - (float)Math.pow(DOTA_INFLUENCE, numDotA);
				percentLeague = 1f - (float)Math.pow(LEAGUE_INFLUENCE, numLeague);
				
				if (Math.random() < percentDotA) {
					caughtDotA = true;
				}
				if (Math.random() < percentLeague) {
					caughtLeague = true;
				}
				if (caughtDotA && caughtLeague) {
					if (percentDotA == percentLeague) {
						newStatus = (Math.random() > 0.5? Status.DOTA : Status.LEAGUE);
					} else {
						newStatus = (percentDotA > percentLeague ? Status.DOTA : Status.LEAGUE);
					}
				} else if (caughtDotA) {
					newStatus = Status.DOTA;
				} else if (caughtLeague) {
					newStatus = Status.LEAGUE;
				}
				break;
			case LEAGUE:
				break;
			case DOTA:
				break;
			case BOTH:
				break;
			default:
				break;
		}
		
		return newStatus;
	}
	
    //Test client
    public static void main(String[] args) {
        int V = 12;
        int E = 7;
        AdjMatrixGraph G = new AdjMatrixGraph(V, E);
        G.vertexStatuses[0] = Status.LEAGUE;
        G.vertexStatuses[1] = Status.DOTA;
        G.vertexStatuses[2] = Status.LEAGUE;
        
        for (int i = 0; i < NUM_ROUNDS; i++) {
        	
        }
        
        int i = 0;
        String vertices = "";
        for (Status s : G.vertexStatuses) {
        	vertices += " | " + s;
        	i++;
        }
        System.out.println(vertices + " | ");
    }

}
